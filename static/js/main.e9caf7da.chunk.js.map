{"version":3,"sources":["getWeb3.js","components/mintForm.js","components/importHorseForm.js","components/importCSVHorseForm.js","components/viewHorseList.js","components/viewNFT.js","components/viewTokenList.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","MintForm","props","state","value","handleChange","bind","handleSubmit","event","this","setState","target","preventDefault","setStateMessage","metaturfNFTInstance","methods","mint","account","send","from","once","receipt","error","onSubmit","type","onChange","React","Component","ImportHorseForm","alert","metaturfHorseRacingDataInstance","requestOracleRaceWinner","on","ImportCSVHorseForm","horseid","horsename","wins","name","csvhorsedata","setHorseFromCSV","ViewHorseList","horse_data_array","listHorses","call","horses","i","length","getHorse","horsedata","horsetext","concat","className","map","item","key","ViewNFT","nft","runExample","tokenURI","tokenid","image","dangerouslySetInnerHTML","__html","ViewTokenList","token_data_array","listTokens","tokens","App","accounts","daysofraces","races","numberoftokens","horsetokenid","state_message","componentDidMount","eth","getAccounts","net","getId","networkId","metaturfHorseRacingDataDeployedNetwork","MetaturfHorseRacingDataContract","networks","metaturfNFTDeployedNetwork","MetaturfNFTContract","MetaturfHorseRacingDataInstance","Contract","abi","address","MetaturfNFTInstance","getInitialData","getLastRaces","getNumberOfTokens","data","axios","get","then","res","rows","race_request","racesdate","lastraces","res_race","setHorse","horsesAvailable","metaturfHorseRacingDataContract","_state_message","align","date","racecourse","racesdate_verbose","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oj4uDAqCeA,EAnCC,kBACd,IAAIC,SAAQ,SAACC,EAASC,GAEpBC,OAAOC,iBAAiB,OAAxB,sBAAgC,kCAAAC,EAAA,0DAE1BF,OAAOG,SAFmB,wBAGtBC,EAAO,IAAIC,IAAKL,OAAOG,UAHD,kBAMpBH,OAAOG,SAASG,SANI,OAQ1BR,EAAQM,GARkB,gDAU1BL,EAAO,EAAD,IAVoB,gCAcrBC,OAAOI,MAERA,EAAOJ,OAAOI,KACpBG,QAAQC,IAAI,2BACZV,EAAQM,KAIFK,EAAW,IAAIJ,IAAKK,UAAUC,aAClC,yBAEIP,EAAO,IAAIC,IAAKI,GACtBF,QAAQC,IAAI,gDACZV,EAAQM,IA3BoB,8D,eCHvBQ,EAAb,YAEE,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAAEC,MAAO,IAEtB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBALH,EAFrB,0EAUeE,GACXC,KAAKC,SAAS,CAACN,MAAOI,EAAMG,OAAOP,UAXvC,4EAcqBI,GAdrB,mFAgBIA,EAAMI,iBACNH,KAAKP,MAAMW,gBAAgB,2BAA6BJ,KAAKN,MAAMC,MAAQ,OAjB/E,kBAoBYK,KAAKP,MAAMY,oBAAoBC,QAAQC,KAAKP,KAAKN,MAAMC,MAAMK,KAAKP,MAAMe,SAASC,KAAK,CAAEC,KAAMV,KAAKP,MAAMe,UAC9GG,KAAK,WAAW,SAACC,GAChB,EAAKnB,MAAMW,gBAAgB,oBAAsB,EAAKV,MAAMC,MAAQ,2BAtB5E,uDA0BMK,KAAKP,MAAMW,gBAAgB,mBAAqBJ,KAAKN,MAAMC,MAAQ,gBACnER,QAAQ0B,MAAR,MA3BN,+IAiCI,OACE,0BAAMC,SAAUd,KAAKF,cACnB,+CAEE,2BAAOiB,KAAK,OAAOpB,MAAOK,KAAKN,MAAMC,MAAOqB,SAAUhB,KAAKJ,gBAE7D,2BAAOmB,KAAK,SAASpB,MAAM,cAvCnC,GAA8BsB,IAAMC,WCAvBC,EAAb,YAEE,WAAY1B,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAAEC,MAAO,IAEtB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBALH,EAFrB,0EAUeE,GACXC,KAAKC,SAAS,CAACN,MAAOI,EAAMG,OAAOP,UAXvC,4EAcqBI,GAdrB,4EAeIqB,MAAM,8BAAgCpB,KAAKN,MAAMC,MAAQ,IAAMK,KAAKP,MAAMe,SAC1ET,EAAMI,iBACNH,KAAKP,MAAMW,gBAAgB,mBAAqBJ,KAAKN,MAAMC,MAAQ,OACnE,IAEEK,KAAKP,MAAM4B,gCAAgCf,QAAQgB,wBAAwBtB,KAAKN,MAAMC,OAAOc,KAAK,CAAEC,KAAMV,KAAKP,MAAMe,UAAWe,GAAG,gBAAgB,SAACX,GAClJ,EAAKnB,MAAMW,gBAAgB,kCAG7B,MAAOS,GAEPb,KAAKP,MAAMW,gBAAgB,SAAWJ,KAAKN,MAAMC,MAAQ,kBACzDR,QAAQ0B,MAAMA,GA3BpB,sIAgCI,OACE,0BAAMC,SAAUd,KAAKF,cACnB,8CAEE,2BAAOiB,KAAK,OAAOpB,MAAOK,KAAKN,MAAMC,MAAOqB,SAAUhB,KAAKJ,gBAE7D,2BAAOmB,KAAK,SAASpB,MAAM,kCAtCnC,GAAqCsB,IAAMC,W,QCA9BM,EAAb,YAEE,WAAY/B,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAAE+B,QAAS,EACTC,UAAW,IACXC,KAAM,GAGrB,EAAK/B,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBARH,EAFrB,0EAceE,GACXC,KAAKC,SAAL,eAAiBF,EAAMG,OAAO0B,KAAO7B,EAAMG,OAAOP,UAftD,4EAkBqBI,GAlBrB,8EAmBU8B,EAAe7B,KAAKN,MAAM+B,QAAU,IAAMzB,KAAKN,MAAMgC,UAAY,IAAM1B,KAAKN,MAAMiC,KAExF5B,EAAMI,iBACNH,KAAKP,MAAMW,gBAAgB,6BAA+ByB,EAAe,OACzE,IACE7B,KAAKP,MAAM4B,gCAAgCf,QAAQwB,gBAAgBD,GAAcpB,KAAK,CAAEC,KAAMV,KAAKP,MAAMe,UAAWe,GAAG,gBAAgB,SAACX,GACtI,EAAKnB,MAAMW,gBAAgB,SAAWyB,EAAe,sCAGvD,MAAOhB,GAEPb,KAAKP,MAAMW,gBAAgB,SAAWyB,EAAe,2BACrD1C,QAAQ0B,MAAMA,GA/BpB,sIAoCI,OACE,0BAAMC,SAAUd,KAAKF,cACnB,uDAEE,2BAAOiB,KAAK,OAAOa,KAAK,UAAUjC,MAAOK,KAAKN,MAAM+B,QAAST,SAAUhB,KAAKJ,gBAE7E,mDAEC,2BAAOmB,KAAK,OAAOa,KAAK,YAAYjC,MAAOK,KAAKN,MAAMgC,UAAWV,SAAUhB,KAAKJ,gBAEjF,mDAEC,2BAAOmB,KAAK,OAAOa,KAAK,OAAOjC,MAAOK,KAAKN,MAAMiC,KAAMX,SAAUhB,KAAKJ,gBAX1E,WAac,2BAAOmB,KAAK,SAASpB,MAAM,4BAlD/C,GAAwCsB,IAAMC,WCCjCa,EAAb,YAEE,WAAYtC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXsC,iBAAkB,IAEpB,EAAKC,aALY,EAFrB,yNAa2BjC,KAAKP,MAAM4B,gCAAgCf,QAAQ2B,aAAaC,OAb3F,OAaYC,EAbZ,OAiBeC,EAAI,EAjBnB,YAiBsBA,EAAID,EAAOE,QAjBjC,iCAkBgCrC,KAAKP,MAAM4B,gCAAgCf,QAAQgC,SAASH,EAAOC,IAAIF,OAlBvG,OAkBcK,EAlBd,OAoBcC,EAAY,IAAML,EAAOC,GAAK,WAAaG,EAAU,GAAK,WAAaA,EAAU,GACvFvC,KAAKC,SAAS,CAAC+B,iBAAkBhC,KAAKN,MAAMsC,iBAAiBS,OAAOD,KArB5E,QAiB0CJ,IAjB1C,yEA4BMhB,MAAM,iDAGNjC,QAAQ0B,MAAR,MA/BN,+IAqCI,OACE,6BACE,wBAAI6B,UAAU,QACX1C,KAAKN,MAAMsC,iBAAiBW,KAAI,SAAAC,GAAI,OACnC,wBAAIC,IAAKD,GAAOA,YAzC5B,GAAmC3B,IAAMC,WCD5B4B,EAAb,YAEE,WAAYrD,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAAEqD,IAAK,IACpB,EAAKC,aAHY,EAFrB,mNAU0BhD,KAAKP,MAAMY,oBAAoBC,QAAQ2C,SAASjD,KAAKP,MAAMyD,SAAShB,OAV9F,OAUYiB,EAVZ,OAWMnD,KAAKC,SAAS,CAAE8C,IAAKI,IAX3B,gDAaM/B,MAAM,0BAA4BpB,KAAKP,MAAMyD,SAC7C/D,QAAQ0B,MAAR,MAdN,8IAmBI,OACE,6BAAK,mCAWH,yBAAKuC,wBAAyB,CAAEC,OAAQrD,KAAKN,MAAMqD,YA/B3D,GAA6B9B,IAAMC,WCCtBoC,EAAb,YAEE,WAAY7D,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACX6D,iBAAkB,IAEpB,EAAKC,aALY,EAFrB,mNAY2BxD,KAAKP,MAAMY,oBAAoBC,QAAQkD,aAAatB,OAZ/E,OAYYuB,EAZZ,OAeMzD,KAAKC,SAAS,CAACsD,iBAAkBE,IAfvC,gDA2BMrC,MAAM,iDACNjC,QAAQ0B,MAAR,MA5BN,8IAgCY,IAAD,OACP,OACE,6BACE,4BACGb,KAAKN,MAAM6D,iBAAiBZ,KAAI,SAAAC,GAAI,OACnC,kBAAC,EAAD,CAASvC,oBAAqB,EAAKZ,MAAMY,oBAAqB6C,QAASN,aArCnF,GAAmC3B,IAAMC,WC6N1BwC,E,2MAlNbhE,MAAQ,CACNV,KAAM,KACN2E,SAAU,KACVtC,gCAAiC,KACjChB,oBAAqB,KACrBuD,YAAa,GACbC,MAAO,GACPC,eAAgB,EAChBC,aAAc,EACdC,cAAe,I,EAGjBC,kB,sBAAoB,wCAAAnF,EAAA,+EAKGN,IALH,cAKVQ,EALU,gBAQOA,EAAKkF,IAAIC,cARhB,cAQVR,EARU,gBAWQ3E,EAAKkF,IAAIE,IAAIC,QAXrB,OAWVC,EAXU,OAYVC,EAAyCC,EAAgCC,SAASH,GAClFI,EAA6BC,EAAoBF,SAASH,GAG1DM,EAAkC,IAAI5F,EAAKkF,IAAIW,SACnDL,EAAgCM,IAChCP,GAA0CA,EAAuCQ,SAE7EC,EAAsB,IAAIhG,EAAKkF,IAAIW,SACvCF,EAAoBG,IACpBJ,GAA8BA,EAA2BK,SAG3D5F,QAAQC,IAAI,4BAA8BmF,EAAuCQ,SACjF5F,QAAQC,IAAI,gBAAkBsF,EAA2BK,SAGzD,EAAK9E,SAAS,CAAEjB,OACA2E,WACAtC,gCAAiCuD,EACjCvE,oBAAqB2E,GACpB,EAAKC,gBAjCN,kDAqChB7D,MAAM,0EAGNjC,QAAQ0B,MAAR,MAxCgB,0D,EAoDpBoE,e,sBAAiB,8BAAAnG,EAAA,6DACPuB,EAAwB,EAAKX,MAA7BW,oBACR,EAAK6E,eAFU,SAGI7E,EAAoBC,QAAQ6E,oBAAoBjD,OAHpD,OAGTkD,EAHS,OAIf,EAAKnF,SAAS,CAAE6D,eAAgBsB,IAJjB,2C,EAOjBF,a,sBAAe,sBAAApG,EAAA,sDAYb,IACEuG,IAAMC,IAAN,4FAAsGC,MAAK,SAAAC,GACzG,IAAM5B,EAAc4B,EAAIJ,KAAKA,KAAKK,KAClC,EAAKxF,SAAS,CAAE2D,gBAKhB,IAAS8B,EAAcC,EAAnBvD,EAAE,EAA0CwD,EAAY,GAE5D,IAAKxD,EAAI,EAAGA,EAAIoD,EAAIJ,KAAKA,KAAKK,KAAKpD,OAAQD,IACzC,IAIEuD,EAAYH,EAAIJ,KAAKA,KAAKK,KAAKrD,GAAnB,UAGZsD,EAAe,2EAFAF,EAAIJ,KAAKA,KAAKK,KAAKrD,GAAnB,aAGe,SAAWuD,EAAY,eAItDN,IAAMC,IAAII,GAAcH,MAAK,SAAAM,GAC1BD,GAAaC,EAAST,KAAKA,KAAO,IAElC,EAAKnF,SAAS,CAAE4D,MAAO+B,OAIzB,MAAO/E,GACPO,MAAM,yBACNjC,QAAQ0B,MAAMA,OAKpB,MAAOA,GACPO,MAAM,wDACNjC,QAAQ0B,MAAMA,GAnDH,2C,EAuDfiF,S,sBAAW,gCAAAhH,EAAA,wEAG+C,EAAKY,MAAnD2B,EAHD,EAGCA,gCAAiCsC,EAHlC,EAGkCA,SAHlC,SAIDtC,EAAgCf,QAAQwB,gBAAgB,uBAAuBrB,KAAK,CAAEC,KAAMiD,EAAS,KAJpG,uDAMPvC,MAAM,+CAGNjC,QAAQ0B,MAAR,MATO,yD,EAaXkF,gB,sBAAkB,sBAAAjH,EAAA,sDAC4B,EAAKY,MAAzCsG,gCACwB1F,QAAQC,KAAK,IAAI,EAAKb,MAAMiE,SAAS,IAFrD,2C,EAKlBvD,gBAAkB,SAAC6F,GACjB,EAAKhG,SAAS,CAAC+D,cAAeiC,K,wEAK9B,OAAKjG,KAAKN,MAAMV,KAKd,yBAAK0D,UAAU,OAEb,yBAAKwD,MAAM,SAAX,oBAAqClG,KAAKN,MAAMiE,SAAS,IAAS,6BAElE,iEAEA,yBAAKjB,UAAU,gBAAgB1C,KAAKN,MAAMsE,eAE1C,iDAEA,4DAAkChE,KAAKN,MAAMkE,YAAYvB,QACzD,wBAAIK,UAAU,QACX1C,KAAKN,MAAMkE,YAAYjB,KAAI,SAAAwD,GAAI,OAAI,4BAAKA,EAAKR,UAAV,IAAsBQ,EAAKC,WAA3B,IAAwCD,EAAKE,uBAGnF,sEACA,6BAAMrG,KAAKN,MAAMmE,OAEjB,6BAAK,+CAEL,wGACA,6BAAK,kBAAC,EAAD,CAAiBxC,gCAAiCrB,KAAKN,MAAM2B,gCACxDb,QAASR,KAAKN,MAAMiE,SAAS,GAC7BvD,gBAAmBJ,KAAKI,mBAElC,wHACA,6BAAK,kBAAC,EAAD,CAAoBiB,gCAAiCrB,KAAKN,MAAM2B,gCAC3Db,QAASR,KAAKN,MAAMiE,SAAS,GAC7BvD,gBAAmBJ,KAAKI,mBAElC,6BAAK,+CACL,kBAAC,EAAD,CAAeiB,gCAAiCrB,KAAKN,MAAM2B,kCAE3D,6BAAK,oCAEL,oCAIA,6BAAK,kBAAC,EAAD,CAAUhB,oBAAqBL,KAAKN,MAAMW,oBACrCG,QAASR,KAAKN,MAAMiE,SAAS,GAAIvD,gBAAmBJ,KAAKI,mBAEnE,6BAAK,8CAAoBJ,KAAKN,MAAMoE,gBAEnC,kBAAC,EAAD,CAAezD,oBAAqBL,KAAKN,MAAMW,oBAAqBD,gBAAmBJ,KAAKI,mBAhDxF,4E,GAzJKc,aCAEoF,QACW,cAA7B1H,OAAO2H,SAASC,UAEe,UAA7B5H,OAAO2H,SAASC,UAEhB5H,OAAO2H,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.e9caf7da.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React from \"react\";\n\nexport class MintForm extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = { value: '' };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  async handleSubmit(event) {\n    //alert('Minting Horse: ' + this.state.value + \" \" + this.props.account);\n    event.preventDefault();\n    this.props.setStateMessage('Minting Token for Horse ' + this.state.value + \"...\");\n    try {\n      //this.props.metaturfNFTInstance.methods.mint(this.state.value,this.props.account).send({ from: this.props.account });\n      await this.props.metaturfNFTInstance.methods.mint(this.state.value,this.props.account).send({ from: this.props.account })\n      .once('receipt', (receipt) => {\n        this.props.setStateMessage(\"Token for horse #\" + this.state.value + \" minted successfully\");\n      })\n    } catch (error) {\n      //alert(`Failed to mint.`);\n      this.props.setStateMessage('Token for Horse ' + this.state.value + \" not minted.\");\n      console.error(error);\n    }\n    \n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Horse ID:&nbsp;\n          <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n        </label>\n        <input type=\"submit\" value=\"Mint\" />\n      </form>\n    );\n  }\n}\n","import React from \"react\";\n\nexport class ImportHorseForm extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = { value: '' };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  async handleSubmit(event) {\n    alert('Importing Horse from race: ' + this.state.value + \" \" + this.props.account);\n    event.preventDefault();\n    this.props.setStateMessage('Importing Horse ' + this.state.value + \"...\");\n    try {\n      //this.props.metaturfNFTInstance.methods.mint(this.state.value,this.props.account).send({ from: this.props.account });\n      this.props.metaturfHorseRacingDataInstance.methods.requestOracleRaceWinner(this.state.value).send({ from: this.props.account }).on('confirmation', (receipt) => {\n        this.props.setStateMessage(\"Horse imported successfully\");\n        //window.location.reload();\n      })\n    } catch (error) {\n      //alert(`Failed to import.`);\n      this.props.setStateMessage('Horse ' + this.state.value + \" not imported.\");\n      console.error(error);\n    }\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Race ID:&nbsp;\n          <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n        </label>\n        <input type=\"submit\" value=\"Import horse (Chainlink)\" />\n      </form>\n    );\n  }\n}\n","import React from \"react\";\n\nexport class ImportCSVHorseForm extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = { horseid: 0,\n                   horsename: \"-\",\n                   wins: 0\n                  };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n  }\n\n  handleChange(event) {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  async handleSubmit(event) {\n    const csvhorsedata = this.state.horseid + \",\" + this.state.horsename + \",\" + this.state.wins;\n    //alert('Importing Horse from CSV: ' + csvhorsedata + \" \" + this.props.account);\n    event.preventDefault();\n    this.props.setStateMessage('Importing Horse from CSV: ' + csvhorsedata + \"...\");\n    try {\n      this.props.metaturfHorseRacingDataInstance.methods.setHorseFromCSV(csvhorsedata).send({ from: this.props.account }).on('confirmation', (receipt) => {\n        this.props.setStateMessage(\"Horse \" + csvhorsedata + \" imported successfully from CSV\");\n        //window.location.reload();\n      })\n    } catch (error) {\n      //alert(`Failed to import.`);\n      this.props.setStateMessage('Horse ' + csvhorsedata + \" not imported from CSV.\");\n      console.error(error);\n    }\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label> \n          &nbsp;&nbsp;&nbsp;Horse ID:\n          <input type=\"text\" name=\"horseid\" value={this.state.horseid} onChange={this.handleChange} />\n        </label>\n         <label>\n          &nbsp;&nbsp;&nbsp;Name:\n          <input type=\"text\" name=\"horsename\" value={this.state.horsename} onChange={this.handleChange} />\n         </label>\n         <label>\n          &nbsp;&nbsp;&nbsp;Wins:\n          <input type=\"text\" name=\"wins\" value={this.state.wins} onChange={this.handleChange} />\n        </label>\n        &nbsp;&nbsp;<input type=\"submit\" value=\"Import horse (CSV)\" />\n      </form>\n    );\n  }\n}\n","import React from \"react\";\n//import ReactHtmlParser from \"react-html-parser\";\n\nexport class ViewHorseList extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      horse_data_array: []\n    };\n    this.listHorses();\n  }\n\n  async listHorses () {\n    try {\n\n      const horses = await this.props.metaturfHorseRacingDataInstance.methods.listHorses().call();\n      \n      //console.log(horses);\n      \n      for (var i = 0; i < horses.length ; i++) {\n        const horsedata = await this.props.metaturfHorseRacingDataInstance.methods.getHorse(horses[i]).call();\n        \n        const horsetext = \"(\" + horses[i] + \") Name: \" + horsedata[0] + ', Wins: ' + horsedata[1]\n        this.setState({horse_data_array: this.state.horse_data_array.concat(horsetext)});\n\n        //console.log(horsedata[0] + ' ' + horsedata[1]);\n        //console.log(this.state.horse_data_array);\n      }\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `listHorses failed. Check console for details.`,\n      );\n      console.error(error);\n    }\n  }\n\n  render() {\n\n    return (\n      <div>\n        <ul className=\"list\" >\n          {this.state.horse_data_array.map(item => (\n            <li key={item}>{item}</li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nexport class ViewNFT extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = { nft: '' };\n    this.runExample();\n  }\n\n  async runExample () {\n    try {\n      const image = await this.props.metaturfNFTInstance.methods.tokenURI(this.props.tokenid).call();\n      this.setState({ nft: image });\n    } catch (error) {\n      alert(`Failed to get tokenURI ` + this.props.tokenid);\n      console.error(error);\n    }\n  }\n\n  render() {\n    return (\n      <div><p>&nbsp;</p>\n      {/* <svg version=\"1.0\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"#17252A\" width=\"128.000000pt\" height=\"134.6000000pt\" viewBox=\"0 0 1280.000000 1346.000000\" preserveAspectRatio=\"xMidYMid meet\">\n        <metadata>Created by potrace 1.15, written by Peter Selinger 2001-2017</metadata>\n        <rect width=\"100%\" height=\"100%\" fill=\"#DEF2F1\" />\n        <g transform=\"translate(0.000000,946.000000) scale(0.100000,-0.100000)\" stroke=\"none\">\n          <path fill=\"#2B7A78\" d=\"M6985 9451 c-323 -53 -617 -257 -764 -533 -75 -138 -106 -237 -121 -380 -40 -387 199 -809 554 -982 182 -88 344 -123 530 -113 490 25 877 366 971 854 28 143 19 253 -35 438 -118 407 -517 706 -960 720 -69 2 -147 0 -175 -4z\"/>\n          <path fill=\"#2B7A78\" d=\"M11060 8573 c-575 -85 -1000 -208 -1405 -408 -362 -179 -682 -418 -944 -706 -232 -255 -389 -464 -876 -1169 -201 -291 -462 -662 -491 -699 -5 -6 -246 86 -377 144 -357 160 -617 379 -772 651 -118 207 -182 451 -240 909 -29 234 -54 347 -101 459 -60 142 -145 232 -261 277 -70 27 -229 32 -308 10 -125 -35 -268 -139 -357 -259 -206 -279 -214 -611 -26 -1092 68 -175 232 -469 366 -659 322 -455 913 -780 1598 -880 l116 -17 -84 -80 c-340 -322 -1092 -607 -1878 -713 -264 -36 -234 -38 -330 30 -171 123 -360 228 -590 329 -275 121 -900 353 -1030 381 -139 31 -364 33 -454 6 -148 -46 -250 -126 -341 -266 -114 -176 -150 -350 -100 -493 8 -23 13 -43 12 -45 -10 -10 -852 86 -1167 133 -409 61 -521 78 -725 113 -126 22 -231 39 -232 37 -6 -5 -61 -271 -58 -277 3 -3 21 -9 42 -12 21 -3 153 -25 293 -50 689 -123 1239 -192 1842 -232 248 -17 242 -15 381 -118 213 -159 424 -245 1017 -413 423 -120 530 -165 675 -282 122 -98 221 -254 219 -344 -6 -158 -205 -519 -428 -774 -627 -714 -1165 -1311 -1499 -1662 -261 -274 -286 -302 -318 -365 l-20 -38 38 7 c21 3 65 15 98 26 77 25 496 248 875 466 162 93 435 249 605 347 398 229 562 339 765 514 604 522 939 1012 1040 1520 44 225 18 397 -93 616 -64 124 -158 251 -316 423 -67 72 -121 132 -119 132 2 0 48 9 103 20 593 115 1015 245 1360 417 161 81 194 99 325 186 152 101 180 124 335 283 l140 143 750 11 c1006 14 1111 22 1171 93 l26 31 -28 8 c-38 10 -214 34 -394 53 -390 41 -519 61 -827 125 -349 72 -404 85 -405 93 0 5 63 97 140 205 76 108 213 305 302 437 440 647 650 923 884 1164 432 443 936 712 1631 871 181 41 394 79 399 71 2 -3 43 -110 91 -236 226 -599 261 -690 565 -1485 73 -190 149 -390 170 -445 21 -55 115 -302 210 -550 95 -247 185 -484 200 -525 16 -41 65 -169 109 -283 44 -115 77 -215 74 -224 -7 -18 -168 -126 -449 -301 -152 -95 -219 -132 -242 -132 -37 0 39 -59 -1107 859 -573 459 -897 712 -932 728 -66 30 -108 26 -158 -18 -39 -35 -59 -86 -50 -128 9 -44 73 -110 208 -218 67 -53 152 -121 189 -151 l67 -54 3 -1552 c3 -1461 4 -1553 21 -1579 24 -38 71 -59 143 -65 62 -5 62 -4 79 28 53 103 50 -1 55 1523 l5 1409 205 -168 c250 -205 759 -611 1049 -838 200 -156 215 -166 235 -153 11 8 242 155 511 327 270 171 500 321 513 333 12 11 22 30 22 42 0 29 -41 146 -143 410 -47 121 -144 375 -217 565 -73 190 -154 401 -180 470 -43 112 -145 380 -390 1020 -43 113 -113 295 -155 405 -42 110 -135 353 -205 540 -71 187 -165 436 -209 554 -45 117 -81 215 -81 217 0 7 -62 2 -160 -13z\"/></g>\n            <text x=\"10\" y=\"1120\" font-weight=\"bold\" font-size=\"7em\">COSTA ESMERALDA</text>          \n            <text x=\"10\" y=\"1300\" font-size=\"7em\">#1 (17894)</text>\n            <text x=\"800\" y=\"1300\" font-size=\"7em\">Wins: 4</text>\n          </svg> */}\n        <div dangerouslySetInnerHTML={{ __html: this.state.nft }} />\n      </div>\n    );\n  }\n\n}\n","import React from \"react\";\nimport { ViewNFT } from \"./viewNFT.js\";\n\nexport class ViewTokenList extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      token_data_array: []\n    };\n    this.listTokens();\n  }\n\n  async listTokens () {\n    try {\n      const tokens = await this.props.metaturfNFTInstance.methods.listTokens().call();\n      \n      //console.log(tokens);\n      this.setState({token_data_array: tokens});\n\n      // for (var i = 0; i < listTokens.length ; i++) {\n      //   const horsedata = await this.props.metaturfHorseRacingDataInstance.methods.getHorse(horses[i]).call();\n        \n      //   const horsetext = \"(\" + horses[i] + \") Name: \" + horsedata[0] + ', Wins: ' + horsedata[1]\n      //   this.setState({token_data_array: this.state.token_data_array.concat(horsetext)});\n\n      //   //console.log(horsedata[0] + ' ' + horsedata[1]);\n      //   console.log(this.state.token_data_array);\n      // }\n    } catch (error) {\n      alert(`listTokens failed. Check console for details.`);\n      console.error(error);\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <ul >\n          {this.state.token_data_array.map(item => (\n            <ViewNFT metaturfNFTInstance={this.props.metaturfNFTInstance} tokenid={item}/>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport axios from 'axios';\nimport MetaturfHorseRacingDataContract from \"./contracts/MetaturfHorseRacingData.json\";\nimport MetaturfNFTContract from \"./contracts/MetaturfNFT.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\nimport { MintForm } from \"./components/mintForm.js\";\nimport { ImportHorseForm } from \"./components/importHorseForm.js\";\nimport { ImportCSVHorseForm } from \"./components/importCSVHorseForm.js\";\nimport { ViewHorseList } from \"./components/viewHorseList.js\";\nimport { ViewTokenList } from \"./components/viewTokenList.js\";\n\nclass App extends Component {\n\n  state = {\n    web3: null,\n    accounts: null,\n    metaturfHorseRacingDataInstance: null,\n    metaturfNFTInstance: null,\n    daysofraces: [],\n    races: '',\n    numberoftokens: 0,\n    horsetokenid: 0,\n    state_message: ''\n  };\n\n  componentDidMount = async () => {\n\n     try {\n\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the network.\n      const networkId = await web3.eth.net.getId();\n      const metaturfHorseRacingDataDeployedNetwork = MetaturfHorseRacingDataContract.networks[networkId];\n      const metaturfNFTDeployedNetwork = MetaturfNFTContract.networks[networkId];\n\n      // Get the contract instances.\n      const MetaturfHorseRacingDataInstance = new web3.eth.Contract(\n        MetaturfHorseRacingDataContract.abi,\n        metaturfHorseRacingDataDeployedNetwork && metaturfHorseRacingDataDeployedNetwork.address,\n      );\n      const MetaturfNFTInstance = new web3.eth.Contract(\n        MetaturfNFTContract.abi,\n        metaturfNFTDeployedNetwork && metaturfNFTDeployedNetwork.address,\n      );\n\n      console.log('MetaturfHorseRacingData: ' + metaturfHorseRacingDataDeployedNetwork.address);\n      console.log('MetaturfNFT: ' + metaturfNFTDeployedNetwork.address);\n\n      // Set web3, accounts, and contracts to the state\n      this.setState({ web3, \n                      accounts, \n                      metaturfHorseRacingDataInstance: MetaturfHorseRacingDataInstance,\n                      metaturfNFTInstance: MetaturfNFTInstance\n                    }, this.getInitialData);\n\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  // componentDidUpdate() {\n  //   if ((this.state.accounts != undefined && this.state.web3.eth.accounts[0] != undefined) && (this.state.web3.eth.accounts[0] !== this.state.accounts[0])) {\n  //     alert(this.state.accounts[0] + \"####\" + this.state.web3.eth.accounts[0]);\n  //     //this.setState({ accounts: this.state.web3.eth.accounts });\n  //     //window.location.reload();\n  //   }\n  // }\n\n  getInitialData = async () => {\n    const { metaturfNFTInstance } = this.state;\n    this.getLastRaces();\n    const data = await metaturfNFTInstance.methods.getNumberOfTokens().call();\n    this.setState({ numberoftokens: data });\n  };\n\n  getLastRaces = async () => {\n\n    /*\n    {\"code\":1,\n     \"status\":200,\n     \"data\":\n      {\"rows\":[\n        {\"racesdate\":\"20210905\",\"racecourseid\":\"3\",\"racecourse\":\"Lasarte\",\"racesdate_verbose\":\"05 Septiembre\"},\n        {\"racesdate\":\"20210829\",\"racecourseid\":\"3\",\"racecourse\":\"Lasarte\",\"racesdate_verbose\":\"29 Agosto\"},\n        {\"racesdate\":\"20210828\",\"racecourseid\":\"15\",\"racecourse\":\"La S\\u00e9nia\",\"racesdate_verbose\":\"28 Agosto\"},\n        {\"racesdate\":\"20210826\",\"racecourseid\":\"1\",\"racecourse\":\"La Zarzuela\",\"racesdate_verbose\":\"26 Agosto\"}]}}\n    */\n    try {\n      axios.get(`https://ghdbadmin.metaturf.com/rest/rest_web3.php?resource=lastresults&id=14&format=json`).then(res => {\n        const daysofraces = res.data.data.rows;\n        this.setState({ daysofraces });\n      \n        //console.log(JSON.stringify({ daysofraces}, null, 2));\n        //console.log(res.data.data.rows.length);\n    \n        let i=0, race_request, racesdate, racecourseid, lastraces = \"\";\n    \n        for (i = 0; i < res.data.data.rows.length; i++) {\n          try {\n            //console.log(res.data.data.rows[i][\"racecourse\"] + \"-\" + res.data.data.rows[i][\"racecourseid\"] + \n            //                                  \"-\" + res.data.data.rows[i][\"racesdate\"]);\n                \n            racesdate = res.data.data.rows[i][\"racesdate\"];\n            racecourseid = res.data.data.rows[i][\"racecourseid\"];\n    \n            race_request = \"https://ghdbadmin.metaturf.com/rest/rest_web3.php?resource=listraces&id=\" +\n                           racecourseid + \"&date=\" + racesdate + \"&format=json\";\n    \n           /* {\"code\":1,\"status\":200,\"data\":\"7178,7182,7179,7183,7184,7180,7181\"} */\n    \n           axios.get(race_request).then(res_race => {\n              lastraces += res_race.data.data + \",\";\n              //console.log(lastraces);\n              this.setState({ races: lastraces });\n              //console.log(JSON.stringify({ races }, null, 2));\n            })\n\n          } catch (error) {\n            alert(`Failed to load races.`);\n            console.error(error);\n          }\n        }\n        /* {\"code\":1,\"status\":200,\"data\":{\"horseinfo\":\"13882,GALILODGE (FR),1\"}} */\n      })\n    } catch (error) {\n      alert(`Failed to load days of races info from Metaturf API.`);\n      console.error(error);\n    }\n  }\n\n  setHorse = async () => {\n    try {\n\n      const { metaturfHorseRacingDataInstance, accounts } = this.state;\n      await metaturfHorseRacingDataInstance.methods.setHorseFromCSV(\"12,GALILODGE (FR),1\").send({ from: accounts[0] });\n    } catch (error) {\n      alert(\n        `setHorse failed. Check console for details.`,\n      );\n      console.error(error);\n    }\n  }\n\n  horsesAvailable = async () => {\n    const { metaturfHorseRacingDataContract } = this.state;\n    metaturfHorseRacingDataContract.methods.mint(739,this.state.accounts[0]);\n  }\n\n  setStateMessage = (_state_message) => {\n    this.setState({state_message: _state_message})\n  }\n\n  render() {    \n\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    return (\n      <div className=\"App\">\n\n        <div align=\"right\">Your account is: {this.state.accounts[0]}</div><br></br>\n\n        <h1>Spanish Horseracing data and NFTs</h1>\n        \n        <div className=\"statemessage\">{this.state.state_message}</div>\n\n        <h2>Metaturf REST API</h2>\n\n        <h3>Last days of races in Spain: {this.state.daysofraces.length}</h3>\n        <ul className=\"list\">\n          {this.state.daysofraces.map(date => <li>{date.racesdate} {date.racecourse} {date.racesdate_verbose}</li>)}\n        </ul>\n\n        <h3>Last races available to fecth winners:</h3>\n        <div>{this.state.races}</div>\n\n        <br/><h2>Horses on-chain</h2>\n\n        <h3>Import horse on-chain using Chainlink oracle (choose Race ID from above)</h3>\n        <div><ImportHorseForm metaturfHorseRacingDataInstance={this.state.metaturfHorseRacingDataInstance}\n                  account={this.state.accounts[0]}\n                  setStateMessage = {this.setStateMessage}/></div>\n\n        <h3>Import horse on-chain (only for testing, should be done always through Chainlink oracle)</h3>\n        <div><ImportCSVHorseForm metaturfHorseRacingDataInstance={this.state.metaturfHorseRacingDataInstance}\n                  account={this.state.accounts[0]}\n                  setStateMessage = {this.setStateMessage}/></div>\n\n        <br/><h3>Horses imported</h3>\n        <ViewHorseList metaturfHorseRacingDataInstance={this.state.metaturfHorseRacingDataInstance} />\n\n        <br/><h2>NFTs</h2>\n        \n        <h3>Mint</h3> \n        {/* <div><button onClick={this.mint}>Mint</button></div> */}\n        {/* <div><button onClick={this.sayHello}>Default</button></div> */}\n\n        <div><MintForm metaturfNFTInstance={this.state.metaturfNFTInstance}\n                  account={this.state.accounts[0]} setStateMessage = {this.setStateMessage}/></div>\n\n        <br/><h3>Tokens minted: {this.state.numberoftokens}</h3>\n\n        {<ViewTokenList metaturfNFTInstance={this.state.metaturfNFTInstance} setStateMessage = {this.setStateMessage}/>}\n\n        {/* <ViewNFT metaturfNFTInstance={this.state.metaturfNFTInstance} tokenid=\"1\"/> */} \n        {/* <ViewNFT metaturfNFTInstance={this.state.metaturfNFTInstance} tokenid=\"2\"/> */}\n\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}